{"version":3,"sources":["components/Header.js","actions.js","components/TextInput.js","components/Button.js","components/LoginPanel.js","components/Greeting.js","components/PullRequestEventListItem.js","components/PullRequestEventsList.js","components/ForkEventListItem.js","components/ForkEventsList.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["Header","react_default","a","createElement","className","fetchForks","username","dispatch","fetchAPI","fetchPRs","loginUser","type","endpoint","fetch","then","res","json","data","updateStoreWithApiResponse","makeForksList","payload","apiName","repos","filter","x","fork","map","url","updateforksList","connect","state","Object","objectSpread","updateUsername","uname","_ref","id","onChange","e","target","value","placeholder","startUp","length","resetState","title","onClick","LoginPanel","components_TextInput","components_Button","loggedIn","PullRequestEventListItem","status","isMerged","statusStyles","isMergedStyles","href","events","result","i","components_PullRequestEventListItem","key","pull_request","html_url","merged","emptyList","actualList","ForkEventListItem","forksList","components_ForkEventListItem","parent","name","App","components_Header","components_Greeting","components_LoginPanel","components_ForkEventsList","components_PullRequestEventsList","Boolean","window","location","hostname","match","initialState","store","createStore","arguments","undefined","action","defineProperty","concat","toConsumableArray","compose","applyMiddleware","thunk","devToolsExtension","f","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.870a4f59.chunk.js","sourcesContent":["import React from 'react';\r\nconst Header = () => {\r\n  return <h1 className=\"pa3 bg-red tl serif i br2\">Git Query</h1>;\r\n};\r\n\r\nexport default Header;\r\n","export const updateUsername = username => ({\r\n  type: 'UPDATE_USERNAME',\r\n  payload: username\r\n});\r\nconst API_URL = 'https://api.github.com/users/';\r\nexport const resetState = () => ({ type: 'RESET_STATE' });\r\nexport const startUp = username => dispatch => {\r\n  if (username.length > 0) {\r\n    dispatch(loginUser());\r\n    dispatch(fetchForks(username));\r\n    dispatch(fetchPRs(username));\r\n  }\r\n};\r\nexport const fetchForks = username => dispatch => {\r\n  dispatch(fetchAPI('repos', username));\r\n};\r\nexport const fetchPRs = username => dispatch => {\r\n  dispatch(fetchAPI('events', username));\r\n};\r\nexport const loginUser = () => {\r\n  return {\r\n    type: 'LOGIN_USER'\r\n  };\r\n};\r\nexport const fetchAPI = (endpoint, username) => dispatch => {\r\n  fetch(API_URL + username + '/' + endpoint)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      dispatch(updateStoreWithApiResponse(data, endpoint));\r\n      if (endpoint === 'repos') dispatch(makeForksList(data));\r\n    });\r\n};\r\nexport const updateStoreWithApiResponse = (payload, endpoint) => {\r\n  return {\r\n    type: 'UPDATE_STORE_WITH_APIRESPONSE',\r\n    apiName: endpoint,\r\n    payload\r\n  };\r\n};\r\n\r\nexport const makeForksList = repos => dispatch => {\r\n  repos\r\n    .filter(x => x.fork)\r\n    .map(x => x.url)\r\n    .map(url =>\r\n      fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => dispatch(updateforksList(data)))\r\n    );\r\n};\r\nexport const updateforksList = payload => {\r\n  return {\r\n    type: 'UPDATE_FORKSLIST',\r\n    payload\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateUsername } from '../actions';\r\nconst mapStateToProps = state => ({ ...state });\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateUsername: uname => dispatch(updateUsername(uname))\r\n});\r\n\r\nconst TextInput = ({ updateUsername, username }) => {\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      id=\"uname\"\r\n      onChange={e => updateUsername(e.target.value)}\r\n      placeholder=\"Enter your username on git\"\r\n      className=\"mh1 w-60-ns w-100 br2 pa1\"\r\n      value={username}\r\n    />\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TextInput);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { startUp, resetState } from '../actions';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  startUp: username => dispatch(startUp(username)),\r\n  resetState: () => dispatch(resetState())\r\n});\r\nconst mapStateToProps = state => ({ ...state });\r\nconst Button = ({ title, startUp, resetState, username }) => {\r\n  return (\r\n    <button\r\n      onClick={e => (title === 'Go' ? startUp(username) : resetState())}\r\n      className=\"mh1 br2\"\r\n    >\r\n      {title}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Button);\r\n","import React from 'react';\r\nimport TextInput from './TextInput';\r\nimport Button from './Button';\r\n\r\nconst LoginPanel = () => {\r\n  return (\r\n    <div>\r\n      <TextInput />\r\n      <div className=\"dib-ns mt2 tr\">\r\n        <Button title=\"Go\" />\r\n        <Button title=\"Reset\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default LoginPanel;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => ({ ...state });\r\nconst Greeting = ({ username, loggedIn }) => {\r\n  return <h3> Hello there {loggedIn ? username : ''}!</h3>;\r\n};\r\nexport default connect(mapStateToProps)(Greeting);\r\n","import React from 'react';\r\n\r\nconst PullRequestEventListItem = ({ title, url, status, isMerged }) => {\r\n  let statusStyles = 'mh1 white br3 pv1 ph2';\r\n  statusStyles += status === 'closed' ? ' bg-red' : ' bg-green';\r\n  let isMergedStyles = 'mh1 white bg-purple br3 pv1 ph2';\r\n  isMergedStyles += isMerged === 'merged' ? ' dib' : ' dn';\r\n  return (\r\n    <li className=\"pa2\">\r\n      <a href={url} className=\"mh2 no-underline underline-hover b black\">\r\n        {title}\r\n      </a>\r\n      <span className={statusStyles}>{status}</span>\r\n      <span className={isMergedStyles}>{isMerged}</span>\r\n    </li>\r\n  );\r\n};\r\nexport default PullRequestEventListItem;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PullRequestEventListItem from './PullRequestEventListItem';\r\nconst mapStateToProps = state => ({ ...state });\r\nconst PullRequestEventsList = ({ events }) => {\r\n  const filtered = events.filter(x => x.type === 'PullRequestEvent');\r\n  const result = filtered.map((x, i) => (\r\n    <PullRequestEventListItem\r\n      key={i}\r\n      title={x.payload.pull_request.title}\r\n      url={x.payload.pull_request.html_url}\r\n      status={x.payload.pull_request.state}\r\n      isMerged={x.payload.pull_request.merged ? 'merged' : ''}\r\n    />\r\n  ));\r\n  const emptyList = <div />;\r\n  const actualList = (\r\n    <div>\r\n      <h3>PullRequest Events</h3>\r\n      <ul>{result}</ul>\r\n    </div>\r\n  );\r\n  return events.length > 0 ? actualList : emptyList;\r\n};\r\n\r\nexport default connect(mapStateToProps)(PullRequestEventsList);\r\n","import React from 'react';\r\nconst ForkEventListItem = ({ url, title }) => (\r\n  <li className=\"pa2\">\r\n    <a href={url} className=\"mh2 no-underline underline-hover b black\">\r\n      {title}\r\n    </a>\r\n  </li>\r\n);\r\nexport default ForkEventListItem;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ForkEventListItem from './ForkEventListItem';\r\n\r\nconst mapStateToProps = state => ({ ...state });\r\nconst ForkEventsList = ({ forksList }) => {\r\n  const result = forksList.map((x, i) => (\r\n    <ForkEventListItem key={i} url={x.parent.html_url} title={x.name} />\r\n  ));\r\n  const emptyList = <div />;\r\n  const actualList = (\r\n    <div>\r\n      <h3>Fork Events</h3>\r\n      <ul>{result}</ul>\r\n    </div>\r\n  );\r\n  return forksList.length > 0 ? actualList : emptyList;\r\n};\r\nexport default connect(mapStateToProps)(ForkEventsList);\r\n","import React from 'react';\n\nimport './App.css';\nimport Header from './components/Header';\nimport LoginPanel from './components/LoginPanel';\nimport Greeting from './components/Greeting';\nimport PullRequestEventsList from './components/PullRequestEventsList';\nimport ForkEventsList from './components/ForkEventsList';\nconst App = () => {\n  return (\n    <div className=\"w-70-ns center\">\n      <Header />\n      <div className=\"w-90 center\">\n        <Greeting />\n        <LoginPanel />\n        <ForkEventsList />\n        <PullRequestEventsList />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n/*\ntodo now:\nadd fetchgit as a thunk dispatched inside loginUser\ncombinereducers?\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\n\r\nconst initialState = {\r\n  username: '',\r\n  loggedIn: false,\r\n  events: [],\r\n  repos: [],\r\n  forksList: []\r\n};\r\nconst rootReducer = (store = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'UPDATE_USERNAME':\r\n      return { ...store, username: action.payload };\r\n    case 'LOGIN_USER':\r\n      if (store.username.length !== 0) return { ...store, loggedIn: true };\r\n      else return store;\r\n    case 'UPDATE_STORE_WITH_APIRESPONSE':\r\n      return { ...store, [action.apiName]: action.payload };\r\n    case 'RESET_STATE':\r\n      return initialState;\r\n    case 'UPDATE_FORKSLIST':\r\n      return { ...store, forksList: [...store.forksList, action.payload] };\r\n    default:\r\n      return store;\r\n  }\r\n};\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(thunk),\r\n    window.devToolsExtension ? window.devToolsExtension() : f => f\r\n  )\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './reducers';\nimport 'tachyons';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}